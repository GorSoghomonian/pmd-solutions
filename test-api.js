// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
const BASE_URL = 'http://localhost:4000';

async function testAPI() {
  console.log('üß™ Testing API endpoints...');
  
  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–æ–≥–æ–≤
    console.log('\n1. Testing /api/blogs endpoint...');
    const blogsResponse = await fetch(`${BASE_URL}/api/blogs?lang=en`);
    console.log(`Status: ${blogsResponse.status}`);
    
    if (blogsResponse.ok) {
      const blogs = await blogsResponse.json();
      console.log(`‚úÖ Got ${blogs.blogs?.length || 0} blogs`);
      
      if (blogs.blogs?.length > 0) {
        const firstBlog = blogs.blogs[0];
        console.log(`First blog details:`);
        console.log(`  ID: ${firstBlog.id}`);
        console.log(`  Title: ${firstBlog.contents?.[0]?.title || 'No title'}`);
        console.log(`  Content length: ${firstBlog.contents?.[0]?.content?.length || 0} chars`);
        console.log(`  Has content: ${!!firstBlog.contents?.[0]?.content}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤
        console.log(`\nüìù Content check for first 3 posts:`);
        blogs.blogs.slice(0, 3).forEach((blog, index) => {
          const content = blog.contents?.[0];
          console.log(`Post ${index + 1} (ID: ${blog.id}):`);
          console.log(`  Title: ${content?.title || 'No title'}`);
          console.log(`  Subtitle: ${content?.subtitle || 'No subtitle'}`);
          console.log(`  Content: ${content?.content ? `${content.content.length} chars` : 'No content'}`);
          console.log(`  Slug would be: blog-${blog.id}`);
        });
      }
    } else {
      console.log(`‚ùå Failed to get blogs list`);
    }
    
  } catch (error) {
    console.error('‚ùå API test failed:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
if (require.main === module) {
  testAPI();
}

module.exports = { testAPI };
